define Outputhand 1 # 0 for left, 1 for right
define Returnhand 0

#Vending machine item exporter
alias rTemp r0
alias rTemp2 r1
alias rTemp3 r3
alias rBusy r2
alias rReqHash r9
alias rReqCount r10
alias rMaxUnitStack r11
alias rStackerCount r12
alias rStackerSetting r13

alias dVender d0
alias dStacker d1
alias dSorter d2
alias dMemHash d3
alias dMemCount d4
#alias dStartExport d5

main:
s db Setting 10
yield
l rReqCount dMemCount Setting
beqz rReqCount main
l rReqHash dMemHash Setting
beqz rReqHash main
jal _CheckInventory
blt rBusy rReqCount main
jal _Configuration
jal _ExportItem
s dMemCount Setting 0
s dMemHash Setting 0
j main

_Configuration:
s db Setting 11
s dSorter Mode 0
s dStacker Mode 1
s dStacker ClearMemory 1
s dSorter ClearMemory 1
s dVender ClearMemory 1
s dVender Lock 0
j ra

_ExportItem:
s db Setting 12
push ra
ExportItemLoop:
ls rTemp dStacker 2 Quantity
s dVender RequestHash rReqHash
#wait for item to arrive
ls rTemp2 dStacker 2 Quantity
breq rTemp rTemp2 -1
ls rStackerCount dStacker 2 Quantity
ls rMaxUnitStack dStacker 2 MaxQuantity
jal _WaitForDevices
min rStackerSetting rReqCount rMaxUnitStack
min rStackerSetting rStackerSetting rStackerCount
breq rStackerCount rMaxUnitStack 2
bgt rReqCount rStackerCount ExportItemLoop
s dStacker Setting rStackerSetting
s dSorter Output Outputhand
jal _RunStacker
ls rStackerCount dStacker 2 Quantity
sub rReqCount rReqCount rStackerSetting
bgtz rReqCount ExportItemLoop
#done, route any leftovers to the vender
beqz rStackerCount ExportItemExit
s dStacker Setting rStackerCount
s dSorter Output Returnhand
jal _RunStacker
ExportItemExit:
pop ra
j ra

_RunStacker:
s db Setting 13
push ra
l rTemp dSorter ImportCount
s dStacker Output 1
#wait for item to arrive
l rTemp2 dSorter ImportCount
breq rTemp rTemp2 -1
jal _WaitForDevices
pop ra
j ra

_WaitForDevices:
s db Setting 14
yield
ls rBusy dSorter 0 Occupied
bgtz rBusy _WaitForDevices
ls rBusy dSorter 1 Occupied
bgtz rBusy _WaitForDevices
ls rBusy dSorter 2 Occupied
bgtz rBusy _WaitForDevices
ls rBusy dVender 0 Occupied
bgtz rBusy _WaitForDevices
ls rBusy dVender 1 Occupied
bgtz rBusy _WaitForDevices
#if the stacker is full so we skip it
beq rStackerCount rMaxUnitStack WaitEnd
ls rBusy dStacker 0 Occupied
bgtz rBusy _WaitForDevices
ls rBusy dStacker 1 Occupied
bgtz rBusy _WaitForDevices
WaitEnd:
j ra

_CheckInventory:
move rTemp 1 # start-1 due to initial increment
move rTemp3 0
InventoryForLoop:
add rTemp rTemp 1
bgt rTemp 99 ra
ls rTemp2 dVender rTemp OccupantHash
beqz rTemp2 InventoryForLoop
bne rReqHash rTemp2 InventoryForLoop
ls rTemp2 dVender rTemp Quantity
beqz rTemp2 InventoryForLoop
add rBusy rBusy rTemp2
bge rBusy rReqCount ra
bge rTemp 99 ra
j InventoryForLoop
